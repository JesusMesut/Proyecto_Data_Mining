------------------------------------------------------------------------

------------------------------------------------------------------------

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
df_madrid <- airbnb[, c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]

df_madrid <- subset(df_madrid,Room.Type=="Entire home/apt" & City=="Madrid" & Neighbourhood!="")
df_madrid <- subset(df_madrid, select = -c(City,Room.Type))
head(df_madrid)
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

    ```{r}
    df_madrid["Square.Meters"] <- df_madrid$Square.Feet* 0.092903
    head(df_madrid)
    ```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

    ```{r}
    porciento_m2 <- mean(is.na(df_madrid$Square.Meters)) * 100
    porciento_m2
    ```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

    ```{r}
    metros_diferentes_na <- mean(na.omit(df_madrid$Square.Meters == 0))
    metros_diferentes_na
    ```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

    ```{r}
    df_madrid[which(df_madrid$Square.Meters==0),"Square.Meters"] <- NA
    head(df_madrid)
    ```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
library(ggplot2)

ggplot(data=data.frame(x=df_madrid$Square.Meters), aes(x))+
  geom_histogram(bins=15,fill="#7070BB",color="#010101")+ 
  scale_x_continuous(breaks = seq(0,50,2), lim=c(0,40))
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

    ```{r}
    df_madrid[which(df_madrid$Square.Meters < 20),"Square.Meters"] <- NA

    ggplot(data=data.frame(x=df_madrid$Square.Meters), aes(x))+
      geom_histogram(bins=15,fill="#7070BB",color="#010101")+ 
      scale_x_continuous(breaks = seq(0,50,2), lim=c(0,40))
    ```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    library(dplyr)

    df_madrid <- df_madrid |>
      group_by(Neighbourhood) |>
      filter(!all(is.na(Square.Meters))) |>
      arrange(Neighbourhood) |>
      ungroup()
    head(df_madrid)
    ```

------------------------------------------------------------------------

El barrio parece ser un indicador importante para los metros cuadrados de un apartamento.

Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey tal y como hicimos en el curso de estadística:

```{r}
tky<-TukeyHSD(aov( formula=Square.Meters~Neighbourhood, data=df_madrid ))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn),length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
diag(resm) <- 1
library(ggplot2)
library(reshape2)
dfResm <- melt(resm)
ggplot(dfResm, aes(x=Var1, y=Var2, fill=value))+
  geom_tile(colour = "black")+
  scale_fill_gradient(low = "white",high = "steelblue")+
  ylab("Class")+xlab("Class")+theme_bw()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position="none")
```

9.  Usando como variable de distancia: 1-resm Dibuja un dendrograma de los diferentes barrios.

    ```{r}
    library(dendextend)

    resm.dist<- as.dist(1-resm)

    resm.tree <- hclust(resm.dist, method="complete")
    resm.dend <- as.dendrogram(resm.tree) 

    clusters <- cutree(resm.dend, k=4)
    plot(color_branches(resm.dend, k=4),leaflab="none")
    ```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    ```{r}
    # establecemos 0.01 el punto de corte
    plot(cut(resm.dend, h = 0.01)$upper, main = "Punto de Corte", cex=1)
    ```

    ```{r}
    # aparecen 4 clúster
    cut(resm.dend, h = 0.01)$lower
    ```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

    ```{r}
    # clúster obtenidos
    clus_nieghb<-cutree(resm.tree,h = 0.01)

    # Crear la columna 'neight_id' en df_madrid y asignar los índices de clus_nieghb
    df_madrid$neight_id <- clus_nieghb[match(df_madrid$Neighbourhood, names(clus_nieghb))]
    head(df_madrid)
    ```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}
# pasamos a factor neight_id
df_madrid$neight_id <- factor(df_madrid$neight_id)

# quitamos la columna Neighbourhood
df_madrid <- subset(df_madrid, select = -c(Neighbourhood))

# test y train
set.seed(12345)
idx<-sample(1:nrow(df_madrid),nrow(df_madrid)*0.5)

df_madrid.train <-df_madrid[idx,]
df_madrid.test <-df_madrid[-idx,]
```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
model_df_madrid <-lm(Square.Meters~.-Square.Feet-Longitude-Latitude,data=df_madrid)

predictions <-predict(model_df_madrid, newdata = df_madrid.test)

summary(model_df_madrid)
```

------------------------------------------------------------------------

14. Mirad el histograma de los residuos sobre el conjunto de test para evaluar la calidad de vuestro modelo

```{r}
# Obtener los residuos del modelo en el conjunto de prueba
residuos <- resid(model_df_madrid, newdata = df_madrid.test)

# histograma
hist(residuos, breaks = "FD", main = "Residuos", xlab = "Residuos")
```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

    ```{r}
    # creamos un apartamento 
    nuevo_apartamento<- data.frame(
      Accommodates = 6,
      Bathrooms = 1,
      Bedrooms = 3,
      Beds = 3,
      Price = 34,
      Square.Feet = 120,
      Guests.Included = 2,
      Extra.People = 15,
      Latitude = 40.40435,
      Longitude =-3.703189,
      Square.Meters = NA,
      Review.Scores.Rating = 88,
      neight_id = 4
    )

    # pasamos a factor neight_id
    nuevo_apartamento$neight_id <- factor(nuevo_apartamento$neight_id)

    # predición
    predict_m2_apart_uno <- predict(model_df_madrid, newdata = nuevo_apartamento)
    predict_m2_apart_uno
    ```

    ```{r}
    # creamos un apartamento con los mismos datos pero con una habitación más
    apart_cuatro_habit <- data.frame(
      Accommodates = 6,
      Bathrooms = 1,
      Bedrooms = 4,
      Beds = 3,
      Price = 34,
      Square.Feet = 120,
      Guests.Included = 2,
      Extra.People = 15,
      Latitude = 40.40435,
      Longitude =-3.703189,
      Square.Meters = NA,
      Review.Scores.Rating = 88,
      neight_id = 4
    )

    # pasamos a factor neight_id
    apart_cuatro_habit$neight_id <- factor(apart_cuatro_habit$neight_id)

    # predicción
    predict_m2_apart_dos <- predict(model_df_madrid, newdata = apart_cuatro_habit)
    predict_m2_apart_dos
    ```

    ```{r}
    # cuánto varía por habitación
    predict_m2_apart_dos - predict_m2_apart_uno
    ```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
df_madrid$Square.Meters <- ifelse(is.na(df_madrid$Square.Meters), predict(model_df_madrid, df_madrid), df_madrid$Square.Meters)
```

------------------------------------------------------------------------

17. Usar PCA para encontrar el apartamento más cercano a uno dado. Este algoritmo nos ayudaría a dado un apartamento que el algoritmo nos devolvería los 5 apartamentos más similares.

Crearemos una función tal que le pasemos un apartamento con los siguientes datos: \* Accommodates \* Bathrooms \* Bedrooms \* Beds \* Price \* Guests.Included \* Extra.People \* Review.Scores.Rating \* Latitude \* Longitude \* Square.Meters

y nos devuelva los 5 más similares de:

```{r}
# quitamos columnas
df_madrid <- subset(df_madrid, select = -c(Square.Feet, neight_id))
df_madrid <- na.omit(df_madrid)

# pca df_madrid
pca_df_madrid<-prcomp(df_madrid,center = TRUE, scale = TRUE)

# gráfico para ver porcenataje de las varianzas
plot(pca_df_madrid$sdev^2/sum(pca_df_madrid$sdev^2),main="Autovalores")
```

```{r}
# con summary es más exacto determinar con cuántos componentes nos quedamos
# nos quedaremos con las cuatro primeras que representan el 60 % 
summary(pca_df_madrid)
```

```{r}
# cogemos el apartamento de referencia en este caso el que más personas extra tiene
apartamento_referencia <- df_madrid |> filter(Extra.People == max(Extra.People))


# predict al apartamento de referencia 
apartamento_referencia_pca <- predict(pca_df_madrid, newdata = apartamento_referencia)


# Cogemos primeros cuatro componentes 
componentes_principales_df_madrid <- pca_df_madrid$x[, 1:4]


# Cogemos primeros cuatro componentes 
componentes_principales_apart_ref<-matrix(apartamento_referencia_pca[1:4],nrow=1)


# matriz de distancias
distancias <- apply(componentes_principales_df_madrid, 1, function(x) sqrt(sum((x - componentes_principales_apart_ref)^2)))

# Cogemos índices de los apartamentos más cercanos (excluyendo el apartamento de referencia)
indices_apartamentos_cercanos <- order(distancias)[-1][1:5]

# Apartamentos más cercanos
apartamentos_cercanos <- df_madrid[indices_apartamentos_cercanos, ]
apartamentos_cercanos
```

```{r}
 # para cargar todas las celdas
```

------------------------------------------------------------------------
